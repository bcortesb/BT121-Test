# ================================================================
# BGScript: Heartrate script
# ----------------------------------------------------------------
# CHANGELOG:
#	- Reset needs to be implemented
#	- ADC convertion equation needs to be performed
#   
# ================================================================
dim result
dim input
dim adcvalue
dim hrvalue
dim count
dim rep
dim tx,rx
dim ltx,lrx
dim f,t
dim display(80)
dim tmp(5)
dim offset


dim connected

#max (for the buffer): 256 bytes. Store every 2ms till 126ms
dim hr_data(2)

#for testing
dim test(5)
dim value
dim pos

# LED pins:
# PB8
const led_port_PB8		= 1
const led_mask_PB8		= $0100
const led_pin_nbr_PB8	= 8
# PB9
const led_port_PB9		= 1
const led_mask_PB9		= $0200
const led_pin_nbr_PB9	= 9
# PB10
const led_port_PB10		= 1
const led_mask_PB10		= $0400
const led_pin_nbr_PB10	= 10

# PB12
const reset_button_port_PB12		= 1
const reset_button_mask_PB12		= $1000
const reset_button_pin_nbr_PB12		= 12


# Boot event listener - Generated when the module is started
event system_boot(major, minor, patch, build, bootloader, hw)

	# Write welcome message to UART interface at boot
    call endpoint_send(0,12,"TEST START\r\n")

    # By default stream data to DROP endpoint meaning the data will be ignored
    call endpoint_set_streaming_destination(3,31)
    call endpoint_set_streaming_destination(0,31)

end

#generated when bluetooth radio is ready to use
event system_initialized(addr)
	#FOR TEST
	count=0
	tmp(0:1)=0
	adcvalue = 0
	
	# Set local Bluetooth friendly name for Bluetooth classic
    call system_set_local_name(9,"TEST DEMO")
	
	# Start RFCOMM (SPP) server with SDP ID 2
    call bt_rfcomm_start_server(2,0)
    
    # Set Bluetooth classic mode to visible and connectable
    call bt_gap_set_mode(1,1,0)
    
    # Start Bluetooth LE advertisements and enable connections
    call le_gap_set_mode(2,2)

    # Configure Bluetooth Security Manager
    # No MITM required, no input/output -> Just Works pairing mode
    call sm_configure(0,3)
    # Enable bonding mode
    call sm_set_bondable_mode(1)
	
    # set timer, time interval between events is 126ms
    call hardware_set_soft_timer(1000,0,0)

    # start another timer, this fast timer is used to drive LED.
    call hardware_set_soft_timer(2,1,0)    # interval = 2 ms, handle = 1, timer is repeating
	# 2 ms -> 500Hz -> Frequency for ECG read
	
	# start another timer: for testing
    call hardware_set_soft_timer(500,2,0)    # interval = 21 ms, handle = 2, timer is repeating
	
    # set connectable and discoverable mode
    call le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable)
end

# Event listener for endpoint status changes
# These events are generated for example when SPP connection is opened
event endpoint_status(endpoint,type,destination,flags)

    # Endpoint status has changed to RFCOMM and become active
    # This means SPP connection has been received
    if (type = endpoint_rfcomm)  && (flags&ENDPOINT_FLAG_ACTIVE)

        # Store endpoint ID
        rep=endpoint

        # Write a message to UART interface to indicate SPP connection
        call endpoint_send(0,15,"SPP CONNECTED\r\n")

        # Send a welcome message to Bluetooth SPP connection
        call endpoint_send(endpoint,25,"Connected to TEST DEMO\r\n")
        
        # Configure data streaming from UART to SPP connection - enable transparent SPP mode
        call endpoint_set_streaming_destination(0,endpoint)
    end if
end

# This event is generated when an endpoint is closing
# for example when SPP connection is closed
event endpoint_closing(reason,endpoint)

    # Close endpoint also in the module
    call endpoint_close(endpoint)

    # If RFCOMM endpoint is closing, which means SPP connection is closed
    # Write a message to UART
    if(endpoint = rep)
        call endpoint_send(0,18,"SPP DISCONNECTED\r\n")
    end if
end

#generated when timer has lapsed
event hardware_soft_timer(handle)
    
	if handle = 1 then

    end if
	

	if handle = 2 then
		
		

	end if
	
    if handle = 0 then
		adcvalue = adcvalue + 15
		hr_data(0:1) = 0
		hr_data(1:1) = adcvalue
		if count = 0 then
			call hardware_write_gpio(led_port_PB8,led_mask_PB8,led_mask_PB8)
			count = 1
			# hr_data(0:1) = 0
			# hr_data(1:1) =
			
		else
			call hardware_write_gpio(led_port_PB8,led_mask_PB8,$0000)
			count = 0
			# hr_data(0:1) = 0
			# hr_data(1:1) = 150
		end if	
		if adcvalue > 150 then
			adcvalue = 15
		end if
		
		call endpoint_send(0,2,hr_data(:))
		# call endpoint_send(rep,8,count)
		call gatt_server_send_characteristic_notification($ff, xgatt_hr, 2, hr_data(0:2))
    end if

end

# generated when new connection is opened
event le_connection_opened(address,address_type,master,connection,bonding)
    call endpoint_send(0, 9, "Connect\r\n")

	# Write a message to UART interface to indicate SPP connection
    call endpoint_send(0,15,"test CONNECTED\r\n")
		
    connected = 1	
end

# generated when the connection is closed
event le_connection_closed(reason,connection)

    call endpoint_send(0, 12, "Disconnect\r\n")

    # connection closed, restart advertisement
    call le_gap_set_mode(le_gap_general_discoverable, le_gap_undirected_connectable) 

    connected = 0	
end
